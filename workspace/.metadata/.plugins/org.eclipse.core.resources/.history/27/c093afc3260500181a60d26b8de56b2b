package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.ast.GlobalVDeclars;
import rs.ac.bg.etf.pp1.ast.ProgName;
import rs.ac.bg.etf.pp1.ast.Program;
import rs.ac.bg.etf.pp1.ast.SingleGlobalVarDecl;
import rs.ac.bg.etf.pp1.ast.SyntaxNode;
import rs.ac.bg.etf.pp1.ast.Type;
import rs.ac.bg.etf.pp1.ast.VisitorAdaptor;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;

import org.apache.log4j.Logger;



public class SemanticAnalyzer extends VisitorAdaptor {

	boolean errorDetected = false;
	int printCallCount = 0;
	Obj currentMethod = null;
	boolean returnFound = false;
	int nVars;
	Struct currentType;

	Logger log = Logger.getLogger(getClass());

	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message); 
		int line = (info == null) ? 0: info.getLine();
		if (line != 0)
			msg.append (" na liniji ").append(line);
		log.info(msg.toString());
	}
	
	public void visit(Program program){
		//nVars = Tab.currentScope.getnVars();
		Tab.chainLocalSymbols(program.getProgName().obj);
		Tab.closeScope();
	}
	
	public void visit(ProgName progName){
		progName.obj = Tab.insert(Obj.Prog, progName.getPName(), Tab.noType);
		Tab.openScope();
	}
	
	//visiti GlobalVarDeclars  --  currentType = null;
	
	public void visit(GlobalVDeclars globalVDeclars){
		report_info("Deklarisana promenljiva "+ globalVDeclars.getVarName(), globalVDeclars);
		Obj varNode = Tab.insert(Obj.Var, globalVDeclars.getVarName(), currentType);
	}
	
	public void visit(SingleGlobalVarDecl singleGlobalVarDecl){
		report_info("Deklarisana promenljiva "+ singleGlobalVarDecl.getVarName(), singleGlobalVarDecl);
		Obj varNode = Tab.insert(Obj.Var, singleGlobalVarDecl.getVarName(), currentType);
	}
	
	public void visit(Type type){
		Obj typeNode = Tab.find(type.getTypeName());
		if(typeNode == Tab.noObj){
			report_error("Nije pronadjen tip " + type.getTypeName() + " u tabeli simbola!", null);
			type.struct = Tab.noType;
		}
		else{
			if(Obj.Type == typeNode.getKind()){
				currentType = type.struct = typeNode.getType();
			}
			else{
				report_error("Greska: Ime: " + type.getTypeName() + " ne predstavlja tip!", type);
				type.struct = Tab.noType;
			}
		}
	}
}

















