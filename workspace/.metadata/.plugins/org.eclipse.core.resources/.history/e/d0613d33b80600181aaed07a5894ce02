package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.CounterVisitor.FormParamCounter;
import rs.ac.bg.etf.pp1.CounterVisitor.VarCounter;
import rs.ac.bg.etf.pp1.ast.AddExpr;
import rs.ac.bg.etf.pp1.ast.AddopMinus;
import rs.ac.bg.etf.pp1.ast.AddopPlus;
import rs.ac.bg.etf.pp1.ast.Assignment;
import rs.ac.bg.etf.pp1.ast.Designator;
import rs.ac.bg.etf.pp1.ast.DesignatorStatement;
import rs.ac.bg.etf.pp1.ast.MethodDecl;
import rs.ac.bg.etf.pp1.ast.MethodTypeName;
import rs.ac.bg.etf.pp1.ast.NumberConst;
import rs.ac.bg.etf.pp1.ast.Print;
import rs.ac.bg.etf.pp1.ast.Return;
import rs.ac.bg.etf.pp1.ast.SyntaxNode;
import rs.ac.bg.etf.pp1.ast.Var;
import rs.ac.bg.etf.pp1.ast.VisitorAdaptor;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.concepts.Obj;

public class CodeGenerator extends VisitorAdaptor {
	private int mainPc;
	
	public int getMainPc() {
		return mainPc;
	}

	public void visit(MethodTypeName methodTypeName){
		if("main".equalsIgnoreCase(methodTypeName.getMethName()))
			mainPc = Code.pc;
		
		methodTypeName.obj.setAdr(Code.pc);
		
		SyntaxNode methodNode = methodTypeName.getParent();
		
		//brojanje lokalnih varijabli
		VarCounter varCounter = new VarCounter();
		methodNode.traverseTopDown(varCounter);
		
		//brojanje formalnih parametara
		FormParamCounter formParamCounter = new FormParamCounter();
		methodNode.traverseTopDown(formParamCounter);
		
		Code.put(Code.enter);
		Code.put(formParamCounter.getCount());
		Code.put(varCounter.getCount() + formParamCounter.getCount());
	}
	
	public void visit(MethodDecl methodDecl){
		Code.put(Code.exit);
		Code.put(Code.return_);
	}
	
	//TODO sta se desi ako se izvrsi i visit(Return) i visit(MethodDecl)
	public void visit(Return Return){
		Code.put(Code.exit);
		Code.put(Code.return_);
	}
	
	public void visit(Assignment assignment){
		DesignatorStatement designatorStatement = (DesignatorStatement) assignment.getParent();
		Code.store(designatorStatement.getDesignator().obj);
	}
	
	public void visit(NumberConst numberConst){
		int br = numberConst.getNumber();
		Code.load(new Obj(Obj.Con, "$", numberConst.struct, numberConst.getNumber(), 0));
	}
	
	public void visit(Designator designator){
		SyntaxNode parent = designator.getParent();
		if(parent.getClass() == Var.class){
			Code.load(designator.obj);
		}
	}
	
	public void visit(AddExpr addExpr){
		if(addExpr.getAddop() instanceof AddopPlus){
			Code.put(Code.add);
		}
		else if(addExpr.getAddop() instanceof AddopMinus){
			Code.put(Code.sub);
		}
	}
	
	public void visit(Print print){
		//TODO CommaNumConst
		Code.put(Code.const_5);
		Code.put(Code.print);
	}
}






