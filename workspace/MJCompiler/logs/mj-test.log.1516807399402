INFO  16:22:35,462 - Compiling source file: E:\Faks\IV\IV-1-PP1\Projekat\Projekat\workspace\MJCompiler\test\program.mj
INFO  16:22:35,466 - #1 program
INFO  16:22:35,467 - #40 P
INFO  16:22:35,467 - #40 const
INFO  16:22:35,467 - #40 int
INFO  16:22:35,467 - #40 size
INFO  16:22:35,467 - #28 =
INFO  16:22:35,467 - #42 10
INFO  16:22:35,467 - #31 ;
INFO  16:22:35,467 - #43 "
INFO  16:22:35,467 - #40 g
INFO  16:22:35,467 - #43 "
INFO  16:22:35,467 - #8 class
INFO  16:22:35,467 - #40 Table
INFO  16:22:35,467 - #38 {
INFO  16:22:35,467 - #40 int
INFO  16:22:35,468 - #40 pos
INFO  16:22:35,468 - #36 [
INFO  16:22:35,468 - #37 ]
INFO  16:22:35,468 - #32 ,
INFO  16:22:35,468 - #40 neg
INFO  16:22:35,468 - #36 [
INFO  16:22:35,501 - #37 ]
INFO  16:22:35,501 - #31 ;
INFO  16:22:35,501 - #38 {
INFO  16:22:35,501 - #4 void
INFO  16:22:35,501 - #40 putp
INFO  16:22:35,502 - #34 (
INFO  16:22:35,502 - #40 int
INFO  16:22:35,502 - #40 a
INFO  16:22:35,502 - #32 ,
INFO  16:22:35,502 - #40 int
INFO  16:22:35,502 - #40 idx
INFO  16:22:35,502 - #35 )
INFO  16:22:35,502 - #38 {
INFO  16:22:35,502 - #40 this
INFO  16:22:35,502 - #33 .
INFO  16:22:35,502 - #40 pos
INFO  16:22:35,502 - #36 [
INFO  16:22:35,502 - #40 idx
INFO  16:22:35,502 - #37 ]
INFO  16:22:35,502 - #28 =
INFO  16:22:35,503 - #40 a
INFO  16:22:35,503 - #31 ;
INFO  16:22:35,503 - #39 }
INFO  16:22:35,503 - #4 void
INFO  16:22:35,503 - #40 putn
INFO  16:22:35,503 - #34 (
INFO  16:22:35,503 - #40 int
INFO  16:22:35,503 - #40 a
INFO  16:22:35,503 - #32 ,
INFO  16:22:35,503 - #40 int
INFO  16:22:35,503 - #40 idx
INFO  16:22:35,503 - #35 )
INFO  16:22:35,503 - #38 {
INFO  16:22:35,503 - #40 this
INFO  16:22:35,503 - #33 .
INFO  16:22:35,504 - #40 neg
INFO  16:22:35,504 - #36 [
INFO  16:22:35,504 - #40 idx
INFO  16:22:35,504 - #37 ]
INFO  16:22:35,504 - #28 =
INFO  16:22:35,504 - #40 a
INFO  16:22:35,504 - #31 ;
INFO  16:22:35,504 - #39 }
INFO  16:22:35,504 - #40 int
INFO  16:22:35,504 - #40 getp
INFO  16:22:35,504 - #34 (
INFO  16:22:35,505 - #40 int
INFO  16:22:35,507 - #40 idx
INFO  16:22:35,507 - #35 )
INFO  16:22:35,507 - #38 {
INFO  16:22:35,507 - #3 return
INFO  16:22:35,507 - #40 pos
INFO  16:22:35,507 - #36 [
INFO  16:22:35,507 - #40 idx
INFO  16:22:35,507 - #37 ]
INFO  16:22:35,507 - #31 ;
INFO  16:22:35,507 - #39 }
INFO  16:22:35,507 - #40 int
INFO  16:22:35,507 - #40 getn
INFO  16:22:35,507 - #34 (
INFO  16:22:35,507 - #40 int
INFO  16:22:35,507 - #40 idx
INFO  16:22:35,507 - #35 )
INFO  16:22:35,507 - #38 {
INFO  16:22:35,508 - #3 return
INFO  16:22:35,508 - #40 neg
INFO  16:22:35,508 - #36 [
INFO  16:22:35,508 - #40 idx
INFO  16:22:35,508 - #37 ]
INFO  16:22:35,508 - #31 ;
INFO  16:22:35,508 - #39 }
INFO  16:22:35,508 - #39 }
INFO  16:22:35,508 - #39 }
INFO  16:22:35,508 - #40 Table
INFO  16:22:35,508 - #40 val
INFO  16:22:35,508 - #31 ;
INFO  16:22:35,508 - #38 {
INFO  16:22:35,508 - #4 void
INFO  16:22:35,508 - #40 main
INFO  16:22:35,508 - #34 (
INFO  16:22:35,508 - #35 )
INFO  16:22:35,509 - #40 int
INFO  16:22:35,509 - #40 x
INFO  16:22:35,509 - #32 ,
INFO  16:22:35,509 - #40 i
INFO  16:22:35,509 - #31 ;
INFO  16:22:35,509 - #38 {
INFO  16:22:35,509 - #40 val
INFO  16:22:35,509 - #28 =
INFO  16:22:35,510 - #9 new
INFO  16:22:35,510 - #40 Table
INFO  16:22:35,510 - #31 ;
INFO  16:22:35,510 - #40 val
INFO  16:22:35,510 - #33 .
INFO  16:22:35,510 - #40 pos
INFO  16:22:35,510 - #28 =
INFO  16:22:35,510 - #9 new
INFO  16:22:35,510 - #40 int
INFO  16:22:35,510 - #36 [
INFO  16:22:35,510 - #40 size
INFO  16:22:35,510 - #37 ]
INFO  16:22:35,510 - #31 ;
INFO  16:22:35,510 - #40 val
INFO  16:22:35,510 - #33 .
INFO  16:22:35,510 - #40 neg
INFO  16:22:35,510 - #28 =
INFO  16:22:35,510 - #9 new
INFO  16:22:35,510 - #40 int
INFO  16:22:35,510 - #36 [
INFO  16:22:35,510 - #40 size
INFO  16:22:35,510 - #37 ]
INFO  16:22:35,511 - #31 ;
INFO  16:22:35,511 - #40 i
INFO  16:22:35,511 - #28 =
INFO  16:22:35,511 - #42 0
INFO  16:22:35,511 - #31 ;
INFO  16:22:35,511 - #11 do
INFO  16:22:35,511 - #38 {
INFO  16:22:35,511 - #40 val
INFO  16:22:35,511 - #33 .
INFO  16:22:35,511 - #40 putp
INFO  16:22:35,511 - #34 (
INFO  16:22:35,511 - #42 0
INFO  16:22:35,511 - #32 ,
INFO  16:22:35,511 - #40 i
INFO  16:22:35,511 - #35 )
INFO  16:22:35,511 - #31 ;
INFO  16:22:35,511 - #40 val
INFO  16:22:35,511 - #33 .
INFO  16:22:35,512 - #40 putn
INFO  16:22:35,512 - #34 (
INFO  16:22:35,512 - #42 0
INFO  16:22:35,512 - #32 ,
INFO  16:22:35,512 - #40 i
INFO  16:22:35,512 - #35 )
INFO  16:22:35,512 - #31 ;
INFO  16:22:35,512 - #40 i
INFO  16:22:35,512 - #29 ++
INFO  16:22:35,513 - #31 ;
INFO  16:22:35,513 - #39 }
INFO  16:22:35,513 - #12 while
INFO  16:22:35,513 - #34 (
INFO  16:22:35,513 - #40 i
INFO  16:22:35,513 - #24 <
INFO  16:22:35,513 - #40 size
INFO  16:22:35,513 - #35 )
INFO  16:22:35,513 - #31 ;
INFO  16:22:35,513 - #10 read
INFO  16:22:35,513 - #34 (
INFO  16:22:35,513 - #40 x
INFO  16:22:35,514 - #35 )
INFO  16:22:35,514 - #31 ;
INFO  16:22:35,514 - #11 do
INFO  16:22:35,514 - #38 {
INFO  16:22:35,514 - #5 if
INFO  16:22:35,514 - #34 (
INFO  16:22:35,514 - #40 x
INFO  16:22:35,514 - #23 >=
INFO  16:22:35,514 - #40 size
INFO  16:22:35,514 - #35 )
INFO  16:22:35,514 - #7 break
INFO  16:22:35,514 - #31 ;
INFO  16:22:35,514 - #5 if
INFO  16:22:35,515 - #34 (
INFO  16:22:35,515 - #42 0
INFO  16:22:35,515 - #25 <=
INFO  16:22:35,515 - #40 x
INFO  16:22:35,515 - #26 &&
INFO  16:22:35,515 - #40 x
INFO  16:22:35,515 - #24 <
INFO  16:22:35,515 - #40 size
INFO  16:22:35,515 - #35 )
INFO  16:22:35,515 - #38 {
INFO  16:22:35,515 - #40 val
INFO  16:22:35,516 - #33 .
INFO  16:22:35,516 - #40 putp
INFO  16:22:35,516 - #34 (
INFO  16:22:35,516 - #40 val
INFO  16:22:35,516 - #33 .
INFO  16:22:35,516 - #40 getp
INFO  16:22:35,516 - #34 (
INFO  16:22:35,516 - #40 x
INFO  16:22:35,516 - #35 )
INFO  16:22:35,516 - #15 +
INFO  16:22:35,516 - #42 1
INFO  16:22:35,516 - #35 )
INFO  16:22:35,516 - #31 ;
INFO  16:22:35,517 - #39 }
INFO  16:22:35,517 - #6 else
INFO  16:22:35,517 - #5 if
INFO  16:22:35,517 - #34 (
INFO  16:22:35,517 - #16 -
INFO  16:22:35,517 - #40 size
INFO  16:22:35,517 - #24 <
INFO  16:22:35,517 - #40 x
INFO  16:22:35,517 - #26 &&
INFO  16:22:35,518 - #40 x
INFO  16:22:35,518 - #24 <
INFO  16:22:35,518 - #42 0
INFO  16:22:35,518 - #35 )
INFO  16:22:35,518 - #38 {
INFO  16:22:35,518 - #40 val
INFO  16:22:35,518 - #33 .
INFO  16:22:35,518 - #40 putn
INFO  16:22:35,518 - #34 (
INFO  16:22:35,518 - #40 val
INFO  16:22:35,518 - #33 .
INFO  16:22:35,518 - #40 getn
INFO  16:22:35,518 - #34 (
INFO  16:22:35,518 - #16 -
INFO  16:22:35,518 - #40 x
INFO  16:22:35,518 - #35 )
INFO  16:22:35,518 - #15 +
INFO  16:22:35,518 - #42 1
INFO  16:22:35,518 - #35 )
INFO  16:22:35,518 - #31 ;
INFO  16:22:35,518 - #39 }
INFO  16:22:35,518 - #10 read
INFO  16:22:35,519 - #34 (
INFO  16:22:35,519 - #40 x
INFO  16:22:35,519 - #35 )
INFO  16:22:35,519 - #31 ;
INFO  16:22:35,519 - #39 }
INFO  16:22:35,519 - #39 }
INFO  16:22:35,519 - #12 while
INFO  16:22:35,519 - #34 (
INFO  16:22:35,519 - #40 true
INFO  16:22:35,519 - #35 )
INFO  16:22:35,519 - #31 ;
INFO  16:22:35,519 - #39 }
