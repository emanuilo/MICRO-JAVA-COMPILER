
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 28 12:59:59 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Sun Jan 28 12:59:59 CET 2018
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\045\010\000\002\002\004\000\002\046" +
    "\003\000\002\014\004\000\002\014\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\006\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\017" +
    "\007\000\002\017\005\000\002\024\004\000\002\024\002" +
    "\000\002\056\006\000\002\056\002\000\002\020\011\000" +
    "\002\025\004\000\002\025\002\000\002\026\005\000\002" +
    "\026\002\000\002\027\004\000\002\027\002\000\002\052" +
    "\003\000\002\003\004\000\002\003\002\000\002\050\012" +
    "\000\002\051\004\000\002\030\003\000\002\030\003\000" +
    "\002\006\003\000\002\006\002\000\002\004\005\000\002" +
    "\004\003\000\002\005\005\000\002\011\004\000\002\011" +
    "\002\000\002\012\004\000\002\012\007\000\002\012\011" +
    "\000\002\012\011\000\002\012\004\000\002\012\004\000" +
    "\002\012\005\000\002\012\007\000\002\012\010\000\002" +
    "\012\005\000\002\031\004\000\002\031\002\000\002\032" +
    "\003\000\002\032\002\000\002\033\005\000\002\033\003" +
    "\000\002\034\005\000\002\034\003\000\002\035\004\000" +
    "\002\036\004\000\002\036\002\000\002\054\005\000\002" +
    "\054\003\000\002\054\004\000\002\053\005\000\002\053" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\006\000\002\055\004\000" +
    "\002\055\007\000\002\055\005\000\002\007\003\000\002" +
    "\007\002\000\002\010\005\000\002\010\003\000\002\037" +
    "\004\000\002\040\004\000\002\040\005\000\002\040\003" +
    "\000\002\040\003\000\002\047\004\000\002\041\004\000" +
    "\002\041\002\000\002\042\004\000\002\042\005\000\002" +
    "\013\003\000\002\013\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\004\005\001\002\000\004\002\265\001" +
    "\002\000\004\055\006\001\002\000\012\005\uffff\021\uffff" +
    "\025\uffff\055\uffff\001\002\000\012\005\ufffd\021\ufffd\025" +
    "\ufffd\055\ufffd\001\002\000\012\005\012\021\021\025\020" +
    "\055\013\001\002\000\006\003\254\055\255\001\002\000" +
    "\010\006\uffe3\020\uffe3\055\uffe3\001\002\000\054\003\uffe5" +
    "\005\uffe5\007\uffe5\011\uffe5\012\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\023\uffe5\024\uffe5\034\uffe5\035\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\055" +
    "\uffe5\001\002\000\012\005\ufffb\021\ufffb\025\ufffb\055\ufffb" +
    "\001\002\000\012\005\ufffe\021\ufffe\025\ufffe\055\ufffe\001" +
    "\002\000\012\005\ufffa\021\ufffa\025\ufffa\055\ufffa\001\002" +
    "\000\012\005\ufffc\021\ufffc\025\ufffc\055\ufffc\001\002\000" +
    "\004\055\036\001\002\000\004\055\013\001\002\000\004" +
    "\055\025\001\002\000\006\007\ufff7\012\ufff7\001\002\000" +
    "\006\007\034\012\033\001\002\000\004\022\026\001\002" +
    "\000\010\054\030\056\027\057\031\001\002\000\006\007" +
    "\ufff4\012\ufff4\001\002\000\006\007\ufff5\012\ufff5\001\002" +
    "\000\006\007\ufff3\012\ufff3\001\002\000\006\007\ufff6\012" +
    "\ufff6\001\002\000\004\055\025\001\002\000\012\005\ufff9" +
    "\021\ufff9\025\ufff9\055\ufff9\001\002\000\006\007\ufff8\012" +
    "\ufff8\001\002\000\006\005\uffea\026\037\001\002\000\004" +
    "\055\013\001\002\000\004\005\041\001\002\000\010\005" +
    "\uffe6\006\uffe6\055\uffe6\001\002\000\010\005\043\006\uffe8" +
    "\055\013\001\002\000\010\006\uffe3\020\uffe3\055\uffe3\001" +
    "\002\000\004\006\046\001\002\000\010\005\uffe7\006\uffe7" +
    "\055\uffe7\001\002\000\012\005\uffec\021\uffec\025\uffec\055" +
    "\uffec\001\002\000\010\006\052\020\055\055\013\001\002" +
    "\000\004\055\250\001\002\000\004\055\uffe0\001\002\000" +
    "\004\006\uffe9\001\002\000\010\006\uffe4\020\uffe4\055\uffe4" +
    "\001\002\000\004\010\056\001\002\000\004\055\uffdf\001" +
    "\002\000\006\011\uffdd\055\013\001\002\000\004\055\244" +
    "\001\002\000\006\011\uffde\012\242\001\002\000\004\011" +
    "\063\001\002\000\006\011\uffdb\012\uffdb\001\002\000\006" +
    "\005\uffe6\055\uffe6\001\002\000\006\005\065\055\013\001" +
    "\002\000\026\005\uffd8\006\uffd8\013\uffd8\014\uffd8\027\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\052\uffd8\055\uffd8\001\002\000" +
    "\026\005\070\006\101\013\076\014\100\027\102\031\103" +
    "\032\077\033\067\052\073\055\071\001\002\000\004\010" +
    "\236\001\002\000\026\005\uffd8\006\uffd8\013\uffd8\014\uffd8" +
    "\027\uffd8\031\uffd8\032\uffd8\033\uffd8\052\uffd8\055\uffd8\001" +
    "\002\000\060\007\uffaa\010\uffaa\011\uffaa\012\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\022\uffaa\023\uffaa\024\uffaa\034\uffaa\035" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\001\002\000" +
    "\012\010\220\022\221\037\216\040\217\001\002\000\004" +
    "\010\207\001\002\000\004\007\206\001\002\000\026\005" +
    "\uffd9\006\uffd9\013\uffd9\014\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\052\uffd9\055\uffd9\001\002\000\004\010\177\001" +
    "\002\000\004\007\176\001\002\000\022\007\uffca\010\124" +
    "\016\110\036\111\054\114\055\071\056\117\057\115\001" +
    "\002\000\010\006\uffe2\020\uffe2\055\uffe2\001\002\000\024" +
    "\005\070\013\076\014\100\027\102\031\103\032\077\033" +
    "\067\052\073\055\071\001\002\000\004\007\104\001\002" +
    "\000\032\005\uffd3\006\uffd3\013\uffd3\014\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\052\uffd3\053\uffd3\055\uffd3" +
    "\001\002\000\004\030\106\001\002\000\004\010\107\001" +
    "\002\000\020\010\124\016\110\036\111\054\114\055\071" +
    "\056\117\057\115\001\002\000\016\010\124\036\111\054" +
    "\114\055\071\056\117\057\115\001\002\000\004\055\013" +
    "\001\002\000\030\011\uffc3\015\127\016\130\017\156\034" +
    "\uffc3\035\uffc3\045\163\046\155\047\164\050\162\051\161" +
    "\001\002\000\046\007\uffba\010\146\011\uffba\012\uffba\015" +
    "\uffba\016\uffba\017\uffba\024\uffba\034\uffba\035\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\001\002\000\044\007\uffbd\011\uffbd\012\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\024\uffbd\034\uffbd\035\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\001\002\000\044\007\uffbb\011\uffbb\012\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\024\uffbb\034\uffbb\035\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\001" +
    "\002\000\006\011\142\034\143\001\002\000\044\007\uffbc" +
    "\011\uffbc\012\uffbc\015\uffbc\016\uffbc\017\uffbc\024\uffbc\034" +
    "\uffbc\035\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\001\002\000\010\011\uffc6\034" +
    "\uffc6\035\uffc6\001\002\000\044\007\uffc1\011\uffc1\012\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\024\uffc1\034\uffc1\035\uffc1\042" +
    "\134\043\135\044\133\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\001\002\000\044\007\uffbe\011\uffbe\012\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\024\uffbe\034\uffbe\035\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\001\002\000\010\011\uffc8\034\uffc8\035\140\001\002" +
    "\000\020\010\124\016\110\036\111\054\114\055\071\056" +
    "\117\057\115\001\002\000\010\011\126\015\127\016\130" +
    "\001\002\000\044\007\uffb6\011\uffb6\012\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\024\uffb6\034\uffb6\035\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\001" +
    "\002\000\016\010\uffa7\036\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\001\002\000\016\010\uffa6\036\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\001\002\000\016\010\124\036\111" +
    "\054\114\055\071\056\117\057\115\001\002\000\044\007" +
    "\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\017\uffc2\024\uffc2" +
    "\034\uffc2\035\uffc2\042\134\043\135\044\133\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000\016\010\uffa3" +
    "\036\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000" +
    "\016\010\uffa5\036\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\001\002\000\016\010\uffa4\036\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\001\002\000\016\010\124\036\111\054\114" +
    "\055\071\056\117\057\115\001\002\000\044\007\uffbf\011" +
    "\uffbf\012\uffbf\015\uffbf\016\uffbf\017\uffbf\024\uffbf\034\uffbf" +
    "\035\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\001\002\000\020\010\124\016\110" +
    "\036\111\054\114\055\071\056\117\057\115\001\002\000" +
    "\010\011\uffc7\034\uffc7\035\uffc7\001\002\000\004\007\145" +
    "\001\002\000\020\010\124\016\110\036\111\054\114\055" +
    "\071\056\117\057\115\001\002\000\010\011\uffc9\034\uffc9" +
    "\035\140\001\002\000\032\005\uffd4\006\uffd4\013\uffd4\014" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\052\uffd4" +
    "\053\uffd4\055\uffd4\001\002\000\022\010\124\011\uffb4\016" +
    "\110\036\111\054\114\055\071\056\117\057\115\001\002" +
    "\000\004\011\154\001\002\000\012\011\uffb2\012\uffb2\015" +
    "\127\016\130\001\002\000\006\011\uffb5\012\152\001\002" +
    "\000\020\010\124\016\110\036\111\054\114\055\071\056" +
    "\117\057\115\001\002\000\012\011\uffb3\012\uffb3\015\127" +
    "\016\130\001\002\000\044\007\uffb9\011\uffb9\012\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\024\uffb9\034\uffb9\035\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\001\002\000\020\010\uffa0\016\uffa0\036\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\001\002\000\020\010\uffa2\016" +
    "\uffa2\036\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002" +
    "\000\020\010\124\016\110\036\111\054\114\055\071\056" +
    "\117\057\115\001\002\000\010\011\uffc5\034\uffc5\035\uffc5" +
    "\001\002\000\020\010\uff9d\016\uff9d\036\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\057\uff9d\001\002\000\020\010\uff9e\016\uff9e" +
    "\036\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002\000" +
    "\020\010\uffa1\016\uffa1\036\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\001\002\000\020\010\uff9f\016\uff9f\036\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000\014\011\uffc4" +
    "\015\127\016\130\034\uffc4\035\uffc4\001\002\000\046\007" +
    "\uffb8\011\uffb8\012\uffb8\015\uffb8\016\uffb8\017\uffb8\023\167" +
    "\024\uffb8\034\uffb8\035\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000\020" +
    "\010\124\016\110\036\111\054\114\055\071\056\117\057" +
    "\115\001\002\000\010\015\127\016\130\024\171\001\002" +
    "\000\044\007\uffb7\011\uffb7\012\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\024\uffb7\034\uffb7\035\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\001\002\000" +
    "\044\007\uffc0\011\uffc0\012\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\024\uffc0\034\uffc0\035\uffc0\042\134\043\135\044\133\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000\010" +
    "\007\uffcb\015\127\016\130\001\002\000\004\007\175\001" +
    "\002\000\032\005\uffd1\006\uffd1\013\uffd1\014\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\001\002\000\032\005\uffd2\006\uffd2\013\uffd2\014\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\052\uffd2\053" +
    "\uffd2\055\uffd2\001\002\000\020\010\124\016\110\036\111" +
    "\054\114\055\071\056\117\057\115\001\002\000\012\011" +
    "\uffcc\012\201\015\127\016\130\001\002\000\004\054\205" +
    "\001\002\000\004\011\203\001\002\000\004\007\204\001" +
    "\002\000\032\005\uffcf\006\uffcf\013\uffcf\014\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\052\uffcf\053\uffcf\055" +
    "\uffcf\001\002\000\004\011\uffcd\001\002\000\032\005\uffd7" +
    "\006\uffd7\013\uffd7\014\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\052\uffd7\053\uffd7\055\uffd7\001\002\000\020" +
    "\010\124\016\110\036\111\054\114\055\071\056\117\057" +
    "\115\001\002\000\006\011\211\034\143\001\002\000\024" +
    "\005\070\013\076\014\100\027\102\031\103\032\077\033" +
    "\067\052\073\055\071\001\002\000\032\005\uffd6\006\uffd6" +
    "\013\uffd6\014\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\052\uffd6\053\213\055\uffd6\001\002\000\024\005\070" +
    "\013\076\014\100\027\102\031\103\032\077\033\067\052" +
    "\073\055\071\001\002\000\032\005\uffd5\006\uffd5\013\uffd5" +
    "\014\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\052" +
    "\uffd5\053\uffd5\055\uffd5\001\002\000\004\007\uffb1\001\002" +
    "\000\004\007\uffae\001\002\000\004\007\uffad\001\002\000" +
    "\022\010\124\011\uffb4\016\110\036\111\054\114\055\071" +
    "\056\117\057\115\001\002\000\020\010\124\016\110\036" +
    "\111\054\114\055\071\056\117\057\115\001\002\000\010" +
    "\007\uffb0\015\127\016\130\001\002\000\004\011\224\001" +
    "\002\000\004\007\uffaf\001\002\000\060\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\015\uffac\016\uffac\017\uffac\022\uffac\023" +
    "\230\024\uffac\034\uffac\035\uffac\037\uffac\040\uffac\041\227" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\001\002\000\060\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\015\uffab\016\uffab\017\uffab\022\uffab\023\uffab\024" +
    "\uffab\034\uffab\035\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\001\002\000\004\055\233\001\002\000\020\010\124" +
    "\016\110\036\111\054\114\055\071\056\117\057\115\001" +
    "\002\000\010\015\127\016\130\024\232\001\002\000\060" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\034\uffa8\035\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002\000\060\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\015\uffa9\016\uffa9\017\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\001\002\000\026\005\070\006\235" +
    "\013\076\014\100\027\102\031\103\032\077\033\067\052" +
    "\073\055\071\001\002\000\032\005\uffce\006\uffce\013\uffce" +
    "\014\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\052" +
    "\uffce\053\uffce\055\uffce\001\002\000\004\055\071\001\002" +
    "\000\004\011\240\001\002\000\004\007\241\001\002\000" +
    "\032\005\uffd0\006\uffd0\013\uffd0\014\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\052\uffd0\053\uffd0\055\uffd0\001" +
    "\002\000\004\055\013\001\002\000\006\011\uffdc\012\uffdc" +
    "\001\002\000\010\011\uffef\012\uffef\023\246\001\002\000" +
    "\006\011\uffda\012\uffda\001\002\000\004\024\247\001\002" +
    "\000\010\007\ufff0\011\ufff0\012\ufff0\001\002\000\004\010" +
    "\uffe1\001\002\000\004\005\uffeb\001\002\000\010\006\253" +
    "\020\055\055\013\001\002\000\004\002\001\001\002\000" +
    "\004\007\264\001\002\000\010\007\uffef\012\uffef\023\246" +
    "\001\002\000\006\007\uffed\012\uffed\001\002\000\006\007" +
    "\261\012\260\001\002\000\004\055\262\001\002\000\014" +
    "\005\ufff2\006\ufff2\021\ufff2\025\ufff2\055\ufff2\001\002\000" +
    "\010\007\uffef\012\uffef\023\246\001\002\000\006\007\uffee" +
    "\012\uffee\001\002\000\014\005\ufff1\006\ufff1\021\ufff1\025" +
    "\ufff1\055\ufff1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\004\045\003\001\001\000\002\001\001\000" +
    "\004\046\006\001\001\000\002\001\001\000\004\014\007" +
    "\001\001\000\014\015\014\016\016\017\013\020\015\052" +
    "\010\001\001\000\002\001\001\000\004\003\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\021\001\001\000\006\021\023\022\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\037\001" +
    "\001\000\004\052\250\001\001\000\002\001\001\000\004" +
    "\027\041\001\001\000\010\017\044\026\043\052\010\001" +
    "\001\000\004\003\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\030\047\050\052\051" +
    "\053\052\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\057\005\061\006\060\052\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\063\001\001\000\006" +
    "\017\044\052\010\001\001\000\004\011\065\001\001\000" +
    "\010\012\074\037\073\047\071\001\001\000\002\001\001" +
    "\000\004\011\233\001\001\000\004\041\224\001\001\000" +
    "\004\040\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\032\173\047\112\053\120\054\172\055\121\001\001" +
    "\000\002\001\001\000\010\012\104\037\073\047\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\033\115\034\122\035\117\047" +
    "\112\053\120\054\111\055\121\001\001\000\010\047\112" +
    "\053\171\055\121\001\001\000\004\052\165\001\001\000" +
    "\010\013\130\036\157\044\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\112\053" +
    "\120\054\124\055\121\001\001\000\004\013\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\047\112\053\131\055\121\001\001\000\004\043\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\112\055\136\001\001\000\002\001\001" +
    "\000\014\035\140\047\112\053\120\054\111\055\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\034\143" +
    "\035\117\047\112\053\120\054\111\055\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\146\010\150" +
    "\047\112\053\120\054\147\055\121\001\001\000\002\001" +
    "\001\000\004\013\130\001\001\000\002\001\001\000\012" +
    "\047\112\053\120\054\152\055\121\001\001\000\004\013" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\047\112\053\120\054\164\055\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\130\001" +
    "\001\000\002\001\001\000\012\047\112\053\120\054\167" +
    "\055\121\001\001\000\004\013\130\001\001\000\002\001" +
    "\001\000\004\043\135\001\001\000\004\013\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\112\053\120\054\177\055\121\001\001\000\006" +
    "\013\130\031\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\033\207\034\122\035\117\047" +
    "\112\053\120\054\111\055\121\001\001\000\002\001\001" +
    "\000\010\012\211\037\073\047\071\001\001\000\002\001" +
    "\001\000\010\012\213\037\073\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\222\010\150\047\112\053\120\054\147" +
    "\055\121\001\001\000\012\047\112\053\120\054\221\055" +
    "\121\001\001\000\004\013\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\047\112\053\120\054\230" +
    "\055\121\001\001\000\004\013\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\074\037\073\047\071" +
    "\001\001\000\002\001\001\000\004\047\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\242\052\056\001\001\000\002\001\001\000\004\024" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\030" +
    "\047\050\052\051\053\052\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\255\001\001\000\004\056" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= LESS_EQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Relop ::= LESS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Relop ::= GREATER_EQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Relop ::= GREATER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Relop ::= NOT_EQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Relop ::= EQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Mulop ::= MOD 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Mulop ::= DIV 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Mulop ::= MUL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Addop ::= MINUS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Addop ::= PLUS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ObjOrCollection ::= LBRACKET Expr RBRACKET 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*ObjOrCollection*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ObjOrCollection ::= PERIOD IDENT 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*ObjOrCollection*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ObjOrCollectionList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*ObjOrCollectionList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ObjOrCollectionList ::= ObjOrCollectionList ObjOrCollection 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*ObjOrCollectionList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Designator ::= IDENT ObjOrCollectionList 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DesignatorExtension ::= DEC 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*DesignatorExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorExtension ::= INC 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*DesignatorExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DesignatorExtension ::= LPAREN ActualPars RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*DesignatorExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DesignatorExtension ::= ASSIGN Expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*DesignatorExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator DesignatorExtension 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ActualParamList ::= Expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ActualPars ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ActualPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ActualPars ::= ActualParamList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*ActualPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Factor ::= NEW Type 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Factor ::= Designator LPAREN ActualPars RPAREN 
            {
              Object RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Factor ::= Designator 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= BOOLEAN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Factor ::= STRING 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Factor ::= NUMBER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Term ::= Factor 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= Term Mulop Factor 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= MINUS Term 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Term 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr Addop Term 
            {
              Object RESULT = null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RelopExpr ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*RelopExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RelopExpr ::= Relop Expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*RelopExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CondFact ::= Expr RelopExpr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CondTerm ::= CondFact 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condition ::= CondTerm 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprOrNoExpr ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*ExprOrNoExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExprOrNoExpr ::= Expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*ExprOrNoExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CommaNumConst ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*CommaNumConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CommaNumConst ::= COMMA NUMBER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*CommaNumConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= PRINT LPAREN Expr CommaNumConst RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= RETURN ExprOrNoExpr SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= CONTINUE SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= BREAK SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= DO Statement WHILE LPAREN Condition RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= IF LPAREN Condition RPAREN Statement ELSE Statement 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= DesignatorStatement SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StatementList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParamDecl ::= Type IDENT Brackets 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*FormalParamDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormPars ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormPars ::= FormalParamList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= VOID 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*TypeOrVoid*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              Object RESULT = null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Object retType = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*TypeOrVoid*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodTypeName ::= TypeOrVoid IDENT 
            {
              Object RESULT = null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*MethodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDecl ::= MethodTypeName LPAREN FormPars RPAREN MultiVarDeclars LBRACE StatementList RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= IDENT 
            {
              Object RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MultiVarDeclars ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MultiVarDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MultiVarDeclars ::= MultiVarDeclars VarDeclars 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*MultiVarDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodDeclars ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*MethodDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclars ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*MethodDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Extension ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Extension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Extension ::= EXTENDS Type 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*Extension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassDeclars ::= CLASS IDENT Extension LBRACE MultiVarDeclars MethodDeclars RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*ClassDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclList ::= VarDeclList COMMA IDENT Brackets 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Brackets ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Brackets*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Brackets ::= LBRACKET RBRACKET 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Brackets*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclars ::= Type error SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*VarDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclars ::= Type IDENT Brackets VarDeclList SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*VarDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NumCharBoolConst ::= BOOLEAN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*NumCharBoolConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NumCharBoolConst ::= STRING 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*NumCharBoolConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NumCharBoolConst ::= NUMBER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*NumCharBoolConst*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= IDENT ASSIGN NumCharBoolConst 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclList ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDeclList ::= ConstDeclList COMMA ConstDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDeclars ::= CONST Type ConstDeclList SEMI 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*ConstDeclars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstVarClassDecl ::= ClassDeclars 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstVarClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ConstVarClassDecl ::= VarDeclars 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstVarClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ConstVarClassDecl ::= ConstDeclars 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstVarClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ConstVarClassDeclList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ConstVarClassDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ConstVarClassDeclList ::= ConstVarClassDeclList ConstVarClassDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ConstVarClassDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Object RESULT = null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName ConstVarClassDeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

